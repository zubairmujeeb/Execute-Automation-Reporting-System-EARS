//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EARS_Service_Test.Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IServices")]
    public interface IServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/CreateTestCycle", ReplyAction="http://tempuri.org/IServices/CreateTestCycleResponse")]
        void CreateTestCycle(string aut, string executedBy, string requestedBy, string buildNo, string appVersion, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/CreateTestCycle", ReplyAction="http://tempuri.org/IServices/CreateTestCycleResponse")]
        System.Threading.Tasks.Task CreateTestCycleAsync(string aut, string executedBy, string requestedBy, string buildNo, string appVersion, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/WriteTestResult", ReplyAction="http://tempuri.org/IServices/WriteTestResultResponse")]
        void WriteTestResult(string featureName, string scenarioName, string stepName, string exception, string result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/WriteTestResult", ReplyAction="http://tempuri.org/IServices/WriteTestResultResponse")]
        System.Threading.Tasks.Task WriteTestResultAsync(string featureName, string scenarioName, string stepName, string exception, string result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicesChannel : EARS_Service_Test.Service.IServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicesClient : System.ServiceModel.ClientBase<EARS_Service_Test.Service.IServices>, EARS_Service_Test.Service.IServices {
        
        public ServicesClient() {
        }
        
        public ServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateTestCycle(string aut, string executedBy, string requestedBy, string buildNo, string appVersion, string machineName) {
            base.Channel.CreateTestCycle(aut, executedBy, requestedBy, buildNo, appVersion, machineName);
        }
        
        public System.Threading.Tasks.Task CreateTestCycleAsync(string aut, string executedBy, string requestedBy, string buildNo, string appVersion, string machineName) {
            return base.Channel.CreateTestCycleAsync(aut, executedBy, requestedBy, buildNo, appVersion, machineName);
        }
        
        public void WriteTestResult(string featureName, string scenarioName, string stepName, string exception, string result) {
            base.Channel.WriteTestResult(featureName, scenarioName, stepName, exception, result);
        }
        
        public System.Threading.Tasks.Task WriteTestResultAsync(string featureName, string scenarioName, string stepName, string exception, string result) {
            return base.Channel.WriteTestResultAsync(featureName, scenarioName, stepName, exception, result);
        }
    }
}
